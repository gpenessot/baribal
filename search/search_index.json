{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Baribal Documentation \ud83d\udc3b","text":"<p>Welcome to Baribal's documentation. Baribal is a Python package that brings the convenience of R's data manipulation functions to the pandas ecosystem. Named after the American black bear (Ursus americanus), this package aims to make data analysis in Python as intuitive and efficient as in R.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>\ud83d\udd0d DataFrame Inspection</li> <li><code>glimpse()</code>: Get an R-style enhanced preview of your DataFrame</li> <li> <p><code>missing_summary()</code>: Visualize and analyze missing values</p> </li> <li> <p>\ud83e\uddf9 Data Cleaning</p> </li> <li><code>clean_names()</code>: Smart column name cleaning and standardization</li> <li> <p><code>rename_all()</code>: Apply consistent renaming patterns to columns</p> </li> <li> <p>\ud83d\udcca Statistical Analysis</p> </li> <li><code>tabyl()</code>: Enhanced cross-tabulations with integrated statistics</li> <li>More features coming soon...</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#installation","title":"Installation","text":"<pre><code>pip install baribal\n</code></pre>"},{"location":"#basic-usage","title":"Basic Usage","text":"<pre><code>import pandas as pd\nimport baribal as bb\n\n# Create a sample DataFrame\ndf = pd.DataFrame({\n    \"First Name\": [\"Alice\", \"Bob\"],\n    \"Last.Name\": [\"Smith\", \"Jones\"],\n    \"Age\": [25, 30]\n})\n\n# Get a quick overview\nbb.glimpse(df)\n\n# Clean column names\nclean_df = bb.clean_names(df)\n\n# Create a cross-tabulation\nresult, stats = bb.tabyl(df, 'First Name', 'Age')\n</code></pre>"},{"location":"#why-baribal","title":"Why Baribal?","text":"<p>While pandas is an incredibly powerful library, some common data analysis tasks can be verbose or require multiple steps. Baribal brings R's intuitive data manipulation functions to Python, helping you to:</p> <ul> <li>Get quick, insightful overviews of your DataFrames</li> <li>Perform common data cleaning tasks with less code</li> <li>Handle missing values more intuitively</li> <li>Generate summary statistics with minimal effort</li> </ul>"},{"location":"#guides","title":"Guides","text":"<ul> <li>Installation Guide</li> <li>Usage Guide</li> </ul>"},{"location":"#api-reference","title":"API Reference","text":"<ul> <li>Core Functions</li> <li>Utility Functions</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are welcome! Whether you're fixing bugs, improving documentation, or proposing new features, please feel free to open an issue or submit a pull request.</p>"},{"location":"#support","title":"Support","text":"<p>If you encounter any issues or have questions:</p> <ol> <li>Check the Installation Guide and Usage Guide</li> <li>Search through our GitHub Issues</li> <li>Open a new issue if needed</li> </ol>"},{"location":"#license","title":"License","text":"<p>Baribal is released under the MIT License. See the LICENSE file for more details.</p>"},{"location":"api/core/","title":"Core API Reference","text":"<p>This module provides the core functionality for DataFrame inspection and analysis.</p>"},{"location":"api/core/#functions","title":"Functions","text":""},{"location":"api/core/#glimpse","title":"<code>glimpse</code>","text":"<pre><code>def glimpse(\n    df: Union[pd.DataFrame, pl.DataFrame],\n    width: Optional[int] = None,\n    max_values: int = 5,\n    max_value_width: int = 20,\n) -&gt; None\n</code></pre> <p>Provide a glimpse of a DataFrame, inspired by R's glimpse function. This function gives a concise summary of your DataFrame's structure and content.</p>"},{"location":"api/core/#parameters","title":"Parameters","text":"<ul> <li><code>df</code>: Input DataFrame (pandas or polars)</li> <li><code>width</code>: Maximum width of the output (defaults to terminal width)</li> <li><code>max_values</code>: Maximum number of sample values to show per column (default: 5)</li> <li><code>max_value_width</code>: Maximum width for displaying individual values (default: 20)</li> </ul>"},{"location":"api/core/#returns","title":"Returns","text":"<p>None (prints to stdout)</p>"},{"location":"api/core/#examples","title":"Examples","text":"<pre><code>import pandas as pd\nimport baribal as bb\n\ndf = pd.DataFrame({\n    'name': ['Alice', 'Bob', 'Charlie'],\n    'age': [25, 30, 35],\n    'city': ['New York', 'London', 'Paris']\n})\n\nbb.glimpse(df)\n</code></pre> <p>Output:</p> <pre><code>Observations: 3\nVariables: 3\nDataFrame type: pandas\n$ name &lt;chr&gt; \"Alice\", \"Bob\", \"Charlie\"\n$ age  &lt;int&gt; 25, 30, 35\n$ city &lt;chr&gt; \"New York\", \"London\", \"Paris\"\n</code></pre>"},{"location":"api/core/#tabyl","title":"<code>tabyl</code>","text":"<pre><code>def tabyl(\n    df: Union[pd.DataFrame, pl.DataFrame],\n    *vars: str,\n    show_na: bool = True,\n    show_pct: bool = True,\n    margin: bool = True,\n) -&gt; tuple[pd.DataFrame, Optional[dict]]\n</code></pre> <p>Create enhanced cross-tabulations with integrated statistics, inspired by the janitor package in R.</p>"},{"location":"api/core/#parameters_1","title":"Parameters","text":"<ul> <li><code>df</code>: Input DataFrame (pandas or polars)</li> <li><code>*vars</code>: One or more column names to tabulate</li> <li><code>show_na</code>: Include NA values in the tabulation (default: True)</li> <li><code>show_pct</code>: Include percentage calculations (default: True)</li> <li><code>margin</code>: Include row and column totals (default: True)</li> </ul>"},{"location":"api/core/#returns_1","title":"Returns","text":"<p>A tuple containing: 1. DataFrame: The cross-tabulation results 2. Optional[dict]: Statistical measures for two-way tables (chi-square test results and Cramer's V)    - Only provided for two-way tables    - Contains 'chi2', 'p_value', and 'cramer_v' keys</p>"},{"location":"api/core/#examples_1","title":"Examples","text":"<p>Single variable frequency table:</p> <pre><code>import pandas as pd\nimport baribal as bb\n\ndf = pd.DataFrame({\n    'category': ['A', 'B', 'A', 'B', 'A'],\n    'status': ['Active', 'Active', 'Inactive', 'Active', 'Active']\n})\n\nresult, _ = bb.tabyl(df, 'category')\nprint(result)\n</code></pre> <p>Two-way cross-tabulation with statistics:</p> <pre><code>result, stats = bb.tabyl(df, 'category', 'status')\nprint(\"Cross-tabulation:\")\nprint(result)\nprint(\"\\nStatistics:\")\nprint(stats)\n</code></pre> <p>Three-way cross-tabulation:</p> <pre><code>result, _ = bb.tabyl(df, 'category', 'status', 'region')\nprint(result)\n</code></pre>"},{"location":"api/core/#notes","title":"Notes","text":"<ul> <li>For two-way tables, statistical measures include:</li> <li>Chi-square test of independence</li> <li>P-value for the chi-square test</li> <li>Cramer's V measure of association</li> <li>Percentages can be calculated for:</li> <li>Row totals (_pct_row suffix)</li> <li>Column totals (_pct_col suffix)</li> <li>Overall totals (_pct_total suffix)</li> </ul>"},{"location":"api/utils/","title":"Utils API Reference","text":"<p>This module provides utility functions for DataFrame column manipulation and cleaning.</p>"},{"location":"api/utils/#functions","title":"Functions","text":""},{"location":"api/utils/#clean_names","title":"<code>clean_names</code>","text":"<pre><code>def clean_names(\n    df: Union[pd.DataFrame, pl.DataFrame],\n    case: str = \"snake\",\n    remove_special: bool = True,\n    prefix: Optional[str] = None,\n    suffix: Optional[str] = None,\n    max_length: Optional[int] = None,\n) -&gt; Union[pd.DataFrame, pl.DataFrame]\n</code></pre> <p>Clean column names to make them easier to handle, inspired by the janitor package in R.</p>"},{"location":"api/utils/#parameters","title":"Parameters","text":"<ul> <li><code>df</code>: DataFrame to clean column names for</li> <li><code>case</code>: Case style (default: \"snake\")</li> <li>'snake': convert to snake_case</li> <li>'camel': convert to camelCase</li> <li>'pascal': convert to PascalCase</li> <li>'upper': convert to UPPER_CASE</li> <li>'lower': convert to lower_case</li> <li><code>remove_special</code>: Whether to remove special characters and accents (default: True)</li> <li><code>prefix</code>: Prefix to add to all column names (default: None)</li> <li><code>suffix</code>: Suffix to add to all column names (default: None)</li> <li><code>max_length</code>: Maximum length for column names (default: None)</li> </ul>"},{"location":"api/utils/#returns","title":"Returns","text":"<p>DataFrame with cleaned column names</p>"},{"location":"api/utils/#examples","title":"Examples","text":"<p>Basic usage:</p> <pre><code>import pandas as pd\nimport baribal as bb\n\ndf = pd.DataFrame({\n    \"First Name\": [1, 2, 3],\n    \"Last.Name\": [4, 5, 6],\n    \"Age!\": [7, 8, 9]\n})\n\n# Convert to snake_case\nclean_df = bb.clean_names(df)\nprint(clean_df.columns)\n# Output: ['first_name', 'last_name', 'age']\n\n# Convert to PascalCase\nclean_df = bb.clean_names(df, case='pascal')\nprint(clean_df.columns)\n# Output: ['FirstName', 'LastName', 'Age']\n</code></pre> <p>With prefix and suffix:</p> <pre><code>clean_df = bb.clean_names(df, prefix='col_', suffix='_var')\nprint(clean_df.columns)\n# Output: ['col_first_name_var', 'col_last_name_var', 'col_age_var']\n</code></pre>"},{"location":"api/utils/#rename_all","title":"<code>rename_all</code>","text":"<pre><code>def rename_all(\n    df: Union[pd.DataFrame, pl.DataFrame],\n    pattern: Union[str, dict[str, str], Callable[[str], str]],\n    *,\n    case: Optional[str] = None,\n    remove_special: bool = False,\n) -&gt; Union[pd.DataFrame, pl.DataFrame]\n</code></pre> <p>Rename all columns in a DataFrame according to a pattern, inspired by the rename_all function from dplyr.</p>"},{"location":"api/utils/#parameters_1","title":"Parameters","text":"<ul> <li><code>df</code>: Input DataFrame (pandas or polars)</li> <li><code>pattern</code>: Pattern for renaming columns. Can be:</li> <li>str: Regular expression pattern with a capture group</li> <li>dict: Mapping of old names to new names</li> <li>Callable: Function that takes old name and returns new name</li> <li><code>case</code>: Optional case transformation ('lower', 'upper', 'title')</li> <li><code>remove_special</code>: Whether to remove special characters (default: False)</li> </ul>"},{"location":"api/utils/#returns_1","title":"Returns","text":"<p>DataFrame with renamed columns</p>"},{"location":"api/utils/#examples_1","title":"Examples","text":"<p>Using regex pattern:</p> <pre><code>import pandas as pd\nimport baribal as bb\n\ndf = pd.DataFrame({\n    'Col_1': [1, 2, 3],\n    'Col_2': [4, 5, 6]\n})\n\n# Keep only the numbers from column names\nresult = bb.rename_all(df, r'Col_(\\d+)')\nprint(result.columns)\n# Output: ['1', '2']\n\n# Convert to lowercase after applying pattern\nresult = bb.rename_all(df, r'(Col_\\d+)', case='lower')\nprint(result.columns)\n# Output: ['col_1', 'col_2']\n</code></pre> <p>Using dictionary:</p> <pre><code>df = pd.DataFrame({\n    'a': [1, 2, 3],\n    'b': [4, 5, 6]\n})\n\n# Rename using dictionary\nresult = bb.rename_all(df, {'a': 'col_a', 'b': 'col_b'})\nprint(result.columns)\n# Output: ['col_a', 'col_b']\n</code></pre> <p>Using function:</p> <pre><code>df = pd.DataFrame({\n    'a': [1, 2, 3],\n    'b': [4, 5, 6]\n})\n\n# Rename using function\nresult = bb.rename_all(df, lambda x: f'col_{x.upper()}')\nprint(result.columns)\n# Output: ['col_A', 'col_B']\n</code></pre>"},{"location":"api/utils/#memory_diet","title":"<code>memory_diet</code>","text":"<pre><code>def memory_diet(\n    df: pd.DataFrame,\n    aggressive: bool = False\n) -&gt; pd.DataFrame:\n</code></pre> <p>Optimize DataFrame memory usage through various techniques including numeric downcasting, categorical compression, and index optimization.</p>"},{"location":"api/utils/#parameters_2","title":"Parameters","text":"<ul> <li><code>df</code>: Input pandas DataFrame to optimize</li> <li><code>aggressive</code>: Whether to apply more aggressive optimizations (default: False)</li> <li>When True, converts string columns to categorical if they have low cardinality (&lt;50% unique values)</li> <li>When False, only performs safe optimizations like numeric downcasting</li> </ul>"},{"location":"api/utils/#returns_2","title":"Returns","text":"<p>DataFrame with optimized memory usage through: - Integer downcasting to smallest possible type (signed/unsigned) - Float downcasting when possible - Categorical conversion for low-cardinality string columns (in aggressive mode) - Index optimization to RangeIndex when possible</p>"},{"location":"api/utils/#examples_2","title":"Examples","text":"<p>Basic usage:</p> <pre><code>import pandas as pd\nimport baribal as bb\n\n# Create a sample DataFrame with various types\ndf = pd.DataFrame({\n    'id': range(1000000),  # int64 by default\n    'small_int': range(100),  # Can be uint8\n    'category': ['A', 'B', 'C'] * 333334  # String with low cardinality\n})\n\n# Basic optimization (numeric downcasting only)\noptimized_df = bb.memory_diet(df)\nprint(f\"Memory usage: {optimized_df.memory_usage(deep=True).sum() / 1024**2:.2f}MB\")\n\n# Aggressive optimization (including categorical conversion)\noptimized_df = bb.memory_diet(df, aggressive=True)\nprint(f\"Memory usage with aggressive mode: {optimized_df.memory_usage(deep=True).sum() / 1024**2:.2f}MB\")\n</code></pre> <p>Advanced usage with memory monitoring:</p> <pre><code>import pandas as pd\nimport baribal as bb\n\n# Load and optimize a large DataFrame\ndf = pd.read_csv('large_file.csv')\n\n# Check initial memory usage\ninitial_memory = df.memory_usage(deep=True).sum() / 1024**2\n\n# Optimize with memory_diet\ndf_optimized = bb.memory_diet(df, aggressive=True)\n\n# Check final memory usage\nfinal_memory = df_optimized.memory_usage(deep=True).sum() / 1024**2\n\nprint(f\"Memory reduced from {initial_memory:.2f}MB to {final_memory:.2f}MB\")\nprint(f\"Reduction: {100 * (1 - final_memory/initial_memory):.1f}%\")\n\n# Check the new dtypes\nprint(\"\\nOptimized data types:\")\nprint(df_optimized.dtypes)\n</code></pre>"},{"location":"guide/installation/","title":"Installation Guide","text":""},{"location":"guide/installation/#requirements","title":"Requirements","text":"<p>Baribal requires Python 3.8 or later and has the following dependencies:</p> <ul> <li>pandas &gt;= 2.0.0</li> <li>polars &gt;= 0.20.0 (optional)</li> <li>numpy &gt;= 1.22.0</li> <li>scipy &gt;= 1.8.0</li> </ul>"},{"location":"guide/installation/#installing-with-pip","title":"Installing with pip","text":"<p>The simplest way to install Baribal is using pip:</p> <pre><code>pip install baribal\n</code></pre>"},{"location":"guide/installation/#installing-with-uv-recommended","title":"Installing with UV (recommended)","text":"<p>Baribal can be installed using the UV package manager for faster and more reliable dependency resolution:</p> <pre><code>uv pip install baribal\n</code></pre>"},{"location":"guide/installation/#development-installation","title":"Development Installation","text":"<p>If you want to contribute to Baribal or install the latest development version:</p> <ol> <li>Clone the repository:</li> </ol> <pre><code>git clone https://github.com/yourusername/baribal.git\ncd baribal\n</code></pre> <ol> <li>Create a virtual environment (optional but recommended):</li> </ol> <pre><code>python -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n</code></pre> <ol> <li>Install development dependencies:</li> </ol> <pre><code>uv pip install -e \".[dev]\"\n</code></pre>"},{"location":"guide/installation/#verifying-installation","title":"Verifying Installation","text":"<p>You can verify your installation by running Python and importing Baribal:</p> <pre><code>import baribal as bb\nprint(bb.__version__)\n</code></pre> <p>This should display the current version number of your Baribal installation.</p>"},{"location":"guide/installation/#optional-dependencies","title":"Optional Dependencies","text":"<p>Baribal works with both pandas and polars DataFrames. While pandas is required, polars support is optional. To use Baribal with polars, make sure to install it:</p> <pre><code>pip install polars\n</code></pre>"},{"location":"guide/installation/#troubleshooting","title":"Troubleshooting","text":"<p>If you encounter any issues during installation:</p> <ol> <li>Make sure you have the latest pip version:</li> </ol> <pre><code>pip install --upgrade pip\n</code></pre> <ol> <li>If you're having dependency conflicts, try using UV:</li> </ol> <pre><code>pip install uv\nuv pip install baribal\n</code></pre> <ol> <li>If problems persist, please open an issue with details about your environment and the error message.</li> </ol>"},{"location":"guide/usage/","title":"Usage Guide","text":""},{"location":"guide/usage/#getting-started","title":"Getting Started","text":"<p>Baribal brings R-inspired data manipulation functions to Python's pandas ecosystem. Here's how to get started:</p> <pre><code>import pandas as pd\nimport baribal as bb\n\n# Create a sample DataFrame\ndf = pd.DataFrame({\n    'First Name': ['Alice', 'Bob', 'Charlie'],\n    'Last.Name': ['Smith', 'Jones', 'Brown'],\n    'Age': [25, 30, 35],\n    'City': ['New York', 'London', 'Paris']\n})\n</code></pre>"},{"location":"guide/usage/#key-features","title":"Key Features","text":""},{"location":"guide/usage/#quick-data-overview-with-glimpse","title":"Quick Data Overview with <code>glimpse()</code>","text":"<p>The <code>glimpse()</code> function provides a concise summary of your DataFrame:</p> <pre><code>bb.glimpse(df)\n</code></pre> <p>Output:</p> <pre><code>Observations: 3\nVariables: 4\nDataFrame type: pandas\n$ First Name &lt;chr&gt; \"Alice\", \"Bob\", \"Charlie\"\n$ Last.Name  &lt;chr&gt; \"Smith\", \"Jones\", \"Brown\"\n$ Age        &lt;int&gt; 25, 30, 35\n$ City       &lt;chr&gt; \"New York\", \"London\", \"Paris\"\n</code></pre>"},{"location":"guide/usage/#cleaning-column-names","title":"Cleaning Column Names","text":"<p>Clean up messy column names with <code>clean_names()</code>:</p> <pre><code>clean_df = bb.clean_names(df)\nprint(clean_df.columns)\n# Output: ['first_name', 'last_name', 'age', 'city']\n\n# Using different case styles\npascal_df = bb.clean_names(df, case='pascal')\nprint(pascal_df.columns)\n# Output: ['FirstName', 'LastName', 'Age', 'City']\n</code></pre>"},{"location":"guide/usage/#advanced-cross-tabulations","title":"Advanced Cross-tabulations","text":"<p>Create enhanced frequency tables and cross-tabulations with <code>tabyl()</code>:</p> <pre><code># Simple frequency table\nresult, _ = bb.tabyl(df, 'city')\nprint(result)\n\n# Cross-tabulation with statistics\nresult, stats = bb.tabyl(df, 'city', 'age')\nprint(\"\\nCross-tabulation:\")\nprint(result)\nprint(\"\\nStatistics:\")\nprint(stats)\n</code></pre>"},{"location":"guide/usage/#column-renaming-patterns","title":"Column Renaming Patterns","text":"<p>Apply consistent renaming patterns with <code>rename_all()</code>:</p> <pre><code># Using regex pattern\ndf_renamed = bb.rename_all(df, r'(.*) Name', case='lower')\n\n# Using a function\ndf_renamed = bb.rename_all(df, lambda x: f\"col_{x.lower()}\")\n</code></pre>"},{"location":"guide/usage/#working-with-missing-data","title":"Working with Missing Data","text":"<p>Baribal includes features for handling missing data:</p> <pre><code># Get summary of missing values\nmissing_df = bb.missing_summary(df)\nprint(missing_df)\n</code></pre>"},{"location":"guide/usage/#tips-and-best-practices","title":"Tips and Best Practices","text":"<ol> <li>Column Naming Conventions</li> <li>Use <code>clean_names()</code> early in your data pipeline</li> <li>Choose a consistent case style for your project</li> <li> <p>Consider adding prefixes for specific data types</p> </li> <li> <p>Performance Considerations</p> </li> <li><code>glimpse()</code> is optimized for large DataFrames</li> <li>Use <code>tabyl()</code> with <code>show_na=False</code> to exclude missing values</li> <li> <p>Set appropriate <code>max_length</code> in <code>clean_names()</code> for very long column names</p> </li> <li> <p>Working with Both pandas and polars</p> </li> <li>All functions support both pandas and polars DataFrames</li> <li>Consistent API across both libraries</li> <li>Output maintains the same type as input</li> </ol>"},{"location":"guide/usage/#common-patterns","title":"Common Patterns","text":""},{"location":"guide/usage/#data-cleaning-pipeline","title":"Data Cleaning Pipeline","text":"<pre><code>def clean_data(df):\n    \"\"\"Example data cleaning pipeline using Baribal.\"\"\"\n    # Clean column names\n    df = bb.clean_names(df, case='snake')\n\n    # Analyze missing values\n    missing = bb.missing_summary(df)\n    print(\"Missing values summary:\")\n    print(missing)\n\n    # Get overview of cleaned data\n    bb.glimpse(df)\n\n    return df\n</code></pre>"},{"location":"guide/usage/#statistical-analysis","title":"Statistical Analysis","text":"<p>```python def analyze_categorical(df, var1, var2):     \"\"\"Example categorical analysis using Baribal.\"\"\"     # Create cross-tabulation     result</p>"}]}